rule integration_prepare:
    input:
        adata = "input/{scenario}.h5ad"
        #adata  = lambda wildcards: cfg.get_from_scenario(wildcards.scenario, key="file")
    output: cfg.ROOT / "{scenario}/prepare/{scaling}/{hvg}/adata_pre.{prep}"
    message:
        """
        Preparing adata
        wildcards: {wildcards}
        parameters: {params}
        output: {output}
        """
    params:
        batch_key = lambda wildcards: cfg.get_from_scenario(wildcards.scenario, key="batch_key"),
        label_key = lambda wildcards: cfg.get_from_scenario(wildcards.scenario, key="label_key"),
        input_annotations = ",".join(cfg.get_all_input_annotations()),
        hvgs      = lambda wildcards: cfg.get_feature_selection(wildcards.hvg),
        scale     = lambda wildcards: "-s" if wildcards.scaling == "scaled" else "",
        rout      = lambda wildcards: "-r" if wildcards.prep == "RDS" else "",
        seurat    = lambda wildcards: "-l" if wildcards.prep == "RDS" else "",
        shuffling_guide =  lambda wildcards: "-g "+ cfg.get_from_scenario(wildcards.scenario, key="shuffling_guide") if any("shuffledWithGuide" in i for i in cfg.get_all_input_annotations()) else "",
        env       = f"conda run -n {cfg.py_env}"
    benchmark:
        str(cfg.ROOT / "{scenario}/prepare/{scaling}/{hvg}/prep_{prep}.benchmark")
        #join_path(cfg.get_filename_pattern("prepare", "directory_by_setting"), "prep_{prep}.benchmark")
    shell:
        """
        {params.env} python scripts/preprocessing/runPP.py -i {input.adata} \
        -o {output} -b {params.batch_key} -t {params.label_key} \
        -a {params.input_annotations} \
        --hvgs {params.hvgs} {params.scale} {params.rout} {params.seurat} {params.shuffling_guide}
        """
